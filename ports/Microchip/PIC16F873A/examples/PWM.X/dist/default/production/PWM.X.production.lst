

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Wed Mar 20 04:00:16 2024

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	16F873A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	text7,local,class=CODE,merge=1,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17     0000                     
    18                           ; Generated 22/03/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F873A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0000                     	;# 
    53     0001                     	;# 
    54     0002                     	;# 
    55     0003                     	;# 
    56     0004                     	;# 
    57     0005                     	;# 
    58     0006                     	;# 
    59     0007                     	;# 
    60     000A                     	;# 
    61     000B                     	;# 
    62     000C                     	;# 
    63     000D                     	;# 
    64     000E                     	;# 
    65     000E                     	;# 
    66     000F                     	;# 
    67     0010                     	;# 
    68     0011                     	;# 
    69     0012                     	;# 
    70     0013                     	;# 
    71     0014                     	;# 
    72     0015                     	;# 
    73     0015                     	;# 
    74     0016                     	;# 
    75     0017                     	;# 
    76     0018                     	;# 
    77     0019                     	;# 
    78     001A                     	;# 
    79     001B                     	;# 
    80     001B                     	;# 
    81     001C                     	;# 
    82     001D                     	;# 
    83     001E                     	;# 
    84     001F                     	;# 
    85     0081                     	;# 
    86     0085                     	;# 
    87     0086                     	;# 
    88     0087                     	;# 
    89     008C                     	;# 
    90     008D                     	;# 
    91     008E                     	;# 
    92     0091                     	;# 
    93     0092                     	;# 
    94     0093                     	;# 
    95     0094                     	;# 
    96     0098                     	;# 
    97     0099                     	;# 
    98     009C                     	;# 
    99     009D                     	;# 
   100     009E                     	;# 
   101     009F                     	;# 
   102     010C                     	;# 
   103     010D                     	;# 
   104     010E                     	;# 
   105     010F                     	;# 
   106     018C                     	;# 
   107     018D                     	;# 
   108     0000                     	;# 
   109     0001                     	;# 
   110     0002                     	;# 
   111     0003                     	;# 
   112     0004                     	;# 
   113     0005                     	;# 
   114     0006                     	;# 
   115     0007                     	;# 
   116     000A                     	;# 
   117     000B                     	;# 
   118     000C                     	;# 
   119     000D                     	;# 
   120     000E                     	;# 
   121     000E                     	;# 
   122     000F                     	;# 
   123     0010                     	;# 
   124     0011                     	;# 
   125     0012                     	;# 
   126     0013                     	;# 
   127     0014                     	;# 
   128     0015                     	;# 
   129     0015                     	;# 
   130     0016                     	;# 
   131     0017                     	;# 
   132     0018                     	;# 
   133     0019                     	;# 
   134     001A                     	;# 
   135     001B                     	;# 
   136     001B                     	;# 
   137     001C                     	;# 
   138     001D                     	;# 
   139     001E                     	;# 
   140     001F                     	;# 
   141     0081                     	;# 
   142     0085                     	;# 
   143     0086                     	;# 
   144     0087                     	;# 
   145     008C                     	;# 
   146     008D                     	;# 
   147     008E                     	;# 
   148     0091                     	;# 
   149     0092                     	;# 
   150     0093                     	;# 
   151     0094                     	;# 
   152     0098                     	;# 
   153     0099                     	;# 
   154     009C                     	;# 
   155     009D                     	;# 
   156     009E                     	;# 
   157     009F                     	;# 
   158     010C                     	;# 
   159     010D                     	;# 
   160     010E                     	;# 
   161     010F                     	;# 
   162     018C                     	;# 
   163     018D                     	;# 
   164     001F                     _ADCON0	set	31
   165     0012                     _T2CONbits	set	18
   166     0011                     _TMR2	set	17
   167     001D                     _CCP2CON	set	29
   168     0012                     _T2CON	set	18
   169     001B                     _CCPR2L	set	27
   170     001E                     _ADRESH	set	30
   171     001F                     _ADCON0bits	set	31
   172     009F                     _ADCON1	set	159
   173     0087                     _TRISCbits	set	135
   174     0092                     _PR2	set	146
   175     009E                     _ADRESL	set	158
   176                           
   177                           	psect	cinit
   178     07FD                     start_initialization:	
   179                           ; #config settings
   180                           
   181     07FD                     __initialization:
   182     07FD                     end_of_initialization:	
   183                           ;End of C runtime variable initialization code
   184                           
   185     07FD                     __end_of__initialization:
   186     07FD  0183               	clrf	3
   187     07FE  118A  2FD6         	ljmp	_main	;jump to C main() function
   188                           
   189                           	psect	cstackCOMMON
   190     0000                     __pcstackCOMMON:
   191     0000                     ??_adc__init:
   192     0000                     ??_pwm__init:	
   193                           ; 1 bytes @ 0x0
   194                           
   195     0000                     ??_main__init:	
   196                           ; 1 bytes @ 0x0
   197                           
   198     0000                     ??_pwm__setup:	
   199                           ; 1 bytes @ 0x0
   200                           
   201     0000                     ??_main:	
   202                           ; 1 bytes @ 0x0
   203                           
   204     0000                     ??___wmul:	
   205                           ; 1 bytes @ 0x0
   206                           
   207                           
   208                           	psect	cstackBANK0
   209     0020                     __pcstackBANK0:	
   210                           ; 1 bytes @ 0x0
   211                           
   212     0020                     ?_adc__init:
   213     0020                     ?_pwm__init:	
   214                           ; 1 bytes @ 0x0
   215                           
   216     0020                     ?_main__init:	
   217                           ; 1 bytes @ 0x0
   218                           
   219     0020                     ?_pwm__setup:	
   220                           ; 1 bytes @ 0x0
   221                           
   222     0020                     ?_main:	
   223                           ; 1 bytes @ 0x0
   224                           
   225     0020                     ?_adc__read:	
   226                           ; 1 bytes @ 0x0
   227                           
   228     0020                     ?___wmul:	
   229                           ; 2 bytes @ 0x0
   230                           
   231     0020                     adc__read@channel:	
   232                           ; 2 bytes @ 0x0
   233                           
   234     0020                     ___wmul@multiplier:	
   235                           ; 2 bytes @ 0x0
   236                           
   237                           
   238                           ; 2 bytes @ 0x0
   239     0020                     	ds	2
   240     0022                     ??_adc__read:
   241     0022                     ___wmul@multiplicand:	
   242                           ; 1 bytes @ 0x2
   243                           
   244                           
   245                           ; 2 bytes @ 0x2
   246     0022                     	ds	2
   247     0024                     ___wmul@product:
   248                           
   249                           ; 2 bytes @ 0x4
   250     0024                     	ds	2
   251     0026                     ?_pwm__write:
   252     0026                     pwm__write@duty:	
   253                           ; 1 bytes @ 0x6
   254                           
   255                           
   256                           ; 2 bytes @ 0x6
   257     0026                     	ds	2
   258     0028                     ??_pwm__write:
   259                           
   260                           ; 1 bytes @ 0x8
   261     0028                     	ds	2
   262     002A                     pwm__write@pwm:
   263                           
   264                           ; 2 bytes @ 0xA
   265     002A                     	ds	2
   266     002C                     main@x:
   267                           
   268                           ; 2 bytes @ 0xC
   269     002C                     	ds	2
   270                           
   271                           	psect	maintext
   272     07D6                     __pmaintext:	
   273 ;;
   274 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   275 ;;
   276 ;; *************** function _main *****************
   277 ;; Defined at:
   278 ;;		line 118 in file "pwm.c"
   279 ;; Parameters:    Size  Location     Type
   280 ;;		None
   281 ;; Auto vars:     Size  Location     Type
   282 ;;  x               2   12[BANK0 ] unsigned int 
   283 ;; Return value:  Size  Location     Type
   284 ;;                  1    wreg      void 
   285 ;; Registers used:
   286 ;;		wreg, status,2, status,0, pclath, cstack
   287 ;; Tracked objects:
   288 ;;		On entry : B00/0
   289 ;;		On exit  : 0/0
   290 ;;		Unchanged: 0/0
   291 ;; Data sizes:     COMMON   BANK0   BANK1
   292 ;;      Params:         0       0       0
   293 ;;      Locals:         0       2       0
   294 ;;      Temps:          0       0       0
   295 ;;      Totals:         0       2       0
   296 ;;Total ram usage:        2 bytes
   297 ;; Hardware stack levels required when called: 2
   298 ;; This function calls:
   299 ;;		_adc__read
   300 ;;		_main__init
   301 ;;		_pwm__setup
   302 ;;		_pwm__write
   303 ;; This function is called by:
   304 ;;		Startup code after reset
   305 ;; This function uses a non-reentrant model
   306 ;;
   307                           
   308     07D6                     _main:	
   309                           ;psect for function _main
   310                           
   311     07D6                     l749:	
   312                           ;incstack = 0
   313                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   314                           
   315                           
   316                           ;pwm.c: 119:  main__init();
   317     07D6  118A  2754  118A   	fcall	_main__init
   318     07D9                     l751:
   319                           
   320                           ;pwm.c: 120:  ADCON1 = 0b10000000; ADCON0 = 0b11001000; ADCON0bits.ADON = 1;;
   321     07D9  3080               	movlw	128
   322     07DA  1683               	bsf	3,5	;RP0=1, select bank1
   323     07DB  1303               	bcf	3,6	;RP1=0, select bank1
   324     07DC  009F               	movwf	31	;volatile
   325     07DD                     l753:
   326     07DD  30C8               	movlw	200
   327     07DE  1283               	bcf	3,5	;RP0=0, select bank0
   328     07DF  1303               	bcf	3,6	;RP1=0, select bank0
   329     07E0  009F               	movwf	31	;volatile
   330     07E1                     l755:
   331     07E1  141F               	bsf	31,0	;volatile
   332     07E2                     l757:
   333                           
   334                           ;pwm.c: 121:  pwm__setup();
   335     07E2  118A  275B  118A   	fcall	_pwm__setup
   336     07E5                     l759:
   337     07E5                     l761:
   338                           
   339                           ;pwm.c: 124:   x = adc__read(0);
   340     07E5  3000               	movlw	0
   341     07E6  1283               	bcf	3,5	;RP0=0, select bank0
   342     07E7  1303               	bcf	3,6	;RP1=0, select bank0
   343     07E8  00A0               	movwf	adc__read@channel
   344     07E9  00A1               	movwf	adc__read@channel+1
   345     07EA  118A  276E  118A   	fcall	_adc__read
   346     07ED  1283               	bcf	3,5	;RP0=0, select bank0
   347     07EE  1303               	bcf	3,6	;RP1=0, select bank0
   348     07EF  0821               	movf	?_adc__read+1,w
   349     07F0  00AD               	movwf	main@x+1
   350     07F1  0820               	movf	?_adc__read,w
   351     07F2  00AC               	movwf	main@x
   352     07F3                     l763:
   353                           
   354                           ;pwm.c: 125:   pwm__write(x);
   355     07F3  082D               	movf	main@x+1,w
   356     07F4  00A7               	movwf	pwm__write@duty+1
   357     07F5  082C               	movf	main@x,w
   358     07F6  00A6               	movwf	pwm__write@duty
   359     07F7  118A  27AF  118A   	fcall	_pwm__write
   360     07FA  2FE5               	goto	l759
   361     07FB  118A  2800         	ljmp	start
   362     07FD                     __end_of_main:
   363                           
   364                           	psect	text1
   365     07AF                     __ptext1:	
   366 ;; *************** function _pwm__write *****************
   367 ;; Defined at:
   368 ;;		line 113 in file "pwm.c"
   369 ;; Parameters:    Size  Location     Type
   370 ;;  duty            2    6[BANK0 ] unsigned int 
   371 ;; Auto vars:     Size  Location     Type
   372 ;;  pwm             2   10[BANK0 ] unsigned int 
   373 ;; Return value:  Size  Location     Type
   374 ;;                  1    wreg      void 
   375 ;; Registers used:
   376 ;;		wreg, status,2, status,0, pclath, cstack
   377 ;; Tracked objects:
   378 ;;		On entry : 0/0
   379 ;;		On exit  : 0/0
   380 ;;		Unchanged: 0/0
   381 ;; Data sizes:     COMMON   BANK0   BANK1
   382 ;;      Params:         0       2       0
   383 ;;      Locals:         0       2       0
   384 ;;      Temps:          0       2       0
   385 ;;      Totals:         0       6       0
   386 ;;Total ram usage:        6 bytes
   387 ;; Hardware stack levels used: 1
   388 ;; Hardware stack levels required when called: 1
   389 ;; This function calls:
   390 ;;		___wmul
   391 ;; This function is called by:
   392 ;;		_main
   393 ;; This function uses a non-reentrant model
   394 ;;
   395                           
   396     07AF                     _pwm__write:	
   397                           ;psect for function _pwm__write
   398                           
   399     07AF                     l745:	
   400                           ;incstack = 0
   401                           ; Regs used in _pwm__write: [wreg+status,2+status,0+pclath+cstack]
   402                           
   403                           
   404                           ;pwm.c: 114:  unsigned int pwm = ((duty - 0) * (60 - 0) / (256 - 0) + 0);
   405     07AF  1283               	bcf	3,5	;RP0=0, select bank0
   406     07B0  1303               	bcf	3,6	;RP1=0, select bank0
   407     07B1  0827               	movf	pwm__write@duty+1,w
   408     07B2  00A1               	movwf	___wmul@multiplier+1
   409     07B3  0826               	movf	pwm__write@duty,w
   410     07B4  00A0               	movwf	___wmul@multiplier
   411     07B5  303C               	movlw	60
   412     07B6  00A2               	movwf	___wmul@multiplicand
   413     07B7  3000               	movlw	0
   414     07B8  00A3               	movwf	___wmul@multiplicand+1
   415     07B9  118A  2788  118A   	fcall	___wmul
   416     07BC  1283               	bcf	3,5	;RP0=0, select bank0
   417     07BD  1303               	bcf	3,6	;RP1=0, select bank0
   418     07BE  0820               	movf	?___wmul,w
   419     07BF  00A8               	movwf	??_pwm__write
   420     07C0  0821               	movf	?___wmul+1,w
   421     07C1  00A9               	movwf	??_pwm__write+1
   422     07C2  0829               	movf	??_pwm__write+1,w
   423     07C3  00A8               	movwf	??_pwm__write
   424     07C4  01A9               	clrf	??_pwm__write+1
   425     07C5  0828               	movf	??_pwm__write,w
   426     07C6  00AA               	movwf	pwm__write@pwm
   427     07C7  0829               	movf	??_pwm__write+1,w
   428     07C8  00AB               	movwf	pwm__write@pwm+1
   429     07C9                     l747:
   430                           
   431                           ;pwm.c: 115:  CCPR2L = (pwm >> 2);
   432     07C9  082B               	movf	pwm__write@pwm+1,w
   433     07CA  00A9               	movwf	??_pwm__write+1
   434     07CB  082A               	movf	pwm__write@pwm,w
   435     07CC  00A8               	movwf	??_pwm__write
   436     07CD  1003               	clrc
   437     07CE  0CA9               	rrf	??_pwm__write+1,f
   438     07CF  0CA8               	rrf	??_pwm__write,f
   439     07D0  1003               	clrc
   440     07D1  0CA9               	rrf	??_pwm__write+1,f
   441     07D2  0CA8               	rrf	??_pwm__write,f
   442     07D3  0828               	movf	??_pwm__write,w
   443     07D4  009B               	movwf	27	;volatile
   444     07D5                     l49:
   445     07D5  0008               	return
   446     07D6                     __end_of_pwm__write:
   447                           
   448                           	psect	text2
   449     0788                     __ptext2:	
   450 ;; *************** function ___wmul *****************
   451 ;; Defined at:
   452 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\Umul16.c"
   453 ;; Parameters:    Size  Location     Type
   454 ;;  multiplier      2    0[BANK0 ] unsigned int 
   455 ;;  multiplicand    2    2[BANK0 ] unsigned int 
   456 ;; Auto vars:     Size  Location     Type
   457 ;;  product         2    4[BANK0 ] unsigned int 
   458 ;; Return value:  Size  Location     Type
   459 ;;                  2    0[BANK0 ] unsigned int 
   460 ;; Registers used:
   461 ;;		wreg, status,2, status,0
   462 ;; Tracked objects:
   463 ;;		On entry : 0/0
   464 ;;		On exit  : 0/0
   465 ;;		Unchanged: 0/0
   466 ;; Data sizes:     COMMON   BANK0   BANK1
   467 ;;      Params:         0       4       0
   468 ;;      Locals:         0       2       0
   469 ;;      Temps:          0       0       0
   470 ;;      Totals:         0       6       0
   471 ;;Total ram usage:        6 bytes
   472 ;; Hardware stack levels used: 1
   473 ;; This function calls:
   474 ;;		Nothing
   475 ;; This function is called by:
   476 ;;		_pwm__write
   477 ;; This function uses a non-reentrant model
   478 ;;
   479                           
   480     0788                     ___wmul:	
   481                           ;psect for function ___wmul
   482                           
   483     0788                     l707:	
   484                           ;incstack = 0
   485                           ; Regs used in ___wmul: [wreg+status,2+status,0]
   486                           
   487     0788  1283               	bcf	3,5	;RP0=0, select bank0
   488     0789  1303               	bcf	3,6	;RP1=0, select bank0
   489     078A  01A4               	clrf	___wmul@product
   490     078B  01A5               	clrf	___wmul@product+1
   491     078C                     l709:
   492     078C  1C20               	btfss	___wmul@multiplier,0
   493     078D  2F8F               	goto	u61
   494     078E  2F90               	goto	u60
   495     078F                     u61:
   496     078F  2F96               	goto	l143
   497     0790                     u60:
   498     0790                     l711:
   499     0790  0822               	movf	___wmul@multiplicand,w
   500     0791  07A4               	addwf	___wmul@product,f
   501     0792  1803               	skipnc
   502     0793  0AA5               	incf	___wmul@product+1,f
   503     0794  0823               	movf	___wmul@multiplicand+1,w
   504     0795  07A5               	addwf	___wmul@product+1,f
   505     0796                     l143:
   506     0796  3001               	movlw	1
   507     0797                     u75:
   508     0797  1003               	clrc
   509     0798  0DA2               	rlf	___wmul@multiplicand,f
   510     0799  0DA3               	rlf	___wmul@multiplicand+1,f
   511     079A  3EFF               	addlw	-1
   512     079B  1D03               	skipz
   513     079C  2F97               	goto	u75
   514     079D                     l713:
   515     079D  3001               	movlw	1
   516     079E                     u85:
   517     079E  1003               	clrc
   518     079F  0CA1               	rrf	___wmul@multiplier+1,f
   519     07A0  0CA0               	rrf	___wmul@multiplier,f
   520     07A1  3EFF               	addlw	-1
   521     07A2  1D03               	skipz
   522     07A3  2F9E               	goto	u85
   523     07A4                     l715:
   524     07A4  0820               	movf	___wmul@multiplier,w
   525     07A5  0421               	iorwf	___wmul@multiplier+1,w
   526     07A6  1D03               	btfss	3,2
   527     07A7  2FA9               	goto	u91
   528     07A8  2FAA               	goto	u90
   529     07A9                     u91:
   530     07A9  2F8C               	goto	l709
   531     07AA                     u90:
   532     07AA                     l717:
   533     07AA  0825               	movf	___wmul@product+1,w
   534     07AB  00A1               	movwf	?___wmul+1
   535     07AC  0824               	movf	___wmul@product,w
   536     07AD  00A0               	movwf	?___wmul
   537     07AE                     l145:
   538     07AE  0008               	return
   539     07AF                     __end_of___wmul:
   540                           
   541                           	psect	text3
   542     075B                     __ptext3:	
   543 ;; *************** function _pwm__setup *****************
   544 ;; Defined at:
   545 ;;		line 103 in file "pwm.c"
   546 ;; Parameters:    Size  Location     Type
   547 ;;		None
   548 ;; Auto vars:     Size  Location     Type
   549 ;;		None
   550 ;; Return value:  Size  Location     Type
   551 ;;                  1    wreg      void 
   552 ;; Registers used:
   553 ;;		wreg, status,2
   554 ;; Tracked objects:
   555 ;;		On entry : 0/0
   556 ;;		On exit  : 0/0
   557 ;;		Unchanged: 0/0
   558 ;; Data sizes:     COMMON   BANK0   BANK1
   559 ;;      Params:         0       0       0
   560 ;;      Locals:         0       0       0
   561 ;;      Temps:          0       0       0
   562 ;;      Totals:         0       0       0
   563 ;;Total ram usage:        0 bytes
   564 ;; Hardware stack levels used: 1
   565 ;; This function calls:
   566 ;;		Nothing
   567 ;; This function is called by:
   568 ;;		_main
   569 ;; This function uses a non-reentrant model
   570 ;;
   571                           
   572     075B                     _pwm__setup:	
   573                           ;psect for function _pwm__setup
   574                           
   575     075B                     l731:	
   576                           ;incstack = 0
   577                           ; Regs used in _pwm__setup: [wreg+status,2]
   578                           
   579                           
   580                           ;pwm.c: 104:  PR2 = 0x3E;
   581     075B  303E               	movlw	62
   582     075C  1683               	bsf	3,5	;RP0=1, select bank1
   583     075D  1303               	bcf	3,6	;RP1=0, select bank1
   584     075E  0092               	movwf	18	;volatile
   585     075F                     l733:
   586                           
   587                           ;pwm.c: 105:  CCPR2L = 0;
   588     075F  1283               	bcf	3,5	;RP0=0, select bank0
   589     0760  1303               	bcf	3,6	;RP1=0, select bank0
   590     0761  019B               	clrf	27	;volatile
   591     0762                     l735:
   592                           
   593                           ;pwm.c: 106:  TRISCbits.TRISC1 = 0;
   594     0762  1683               	bsf	3,5	;RP0=1, select bank1
   595     0763  1303               	bcf	3,6	;RP1=0, select bank1
   596     0764  1087               	bcf	7,1	;volatile
   597     0765                     l737:
   598                           
   599                           ;pwm.c: 107:  T2CON = 0b00000011;
   600     0765  3003               	movlw	3
   601     0766  1283               	bcf	3,5	;RP0=0, select bank0
   602     0767  1303               	bcf	3,6	;RP1=0, select bank0
   603     0768  0092               	movwf	18	;volatile
   604     0769                     l739:
   605                           
   606                           ;pwm.c: 108:  CCP2CON = 0b00001100;
   607     0769  300C               	movlw	12
   608     076A  009D               	movwf	29	;volatile
   609     076B                     l741:
   610                           
   611                           ;pwm.c: 109:  TMR2 = 0;
   612     076B  0191               	clrf	17	;volatile
   613     076C                     l743:
   614                           
   615                           ;pwm.c: 110:  T2CONbits.TMR2ON = 1;
   616     076C  1512               	bsf	18,2	;volatile
   617     076D                     l46:
   618     076D  0008               	return
   619     076E                     __end_of_pwm__setup:
   620                           
   621                           	psect	text4
   622     0754                     __ptext4:	
   623 ;; *************** function _main__init *****************
   624 ;; Defined at:
   625 ;;		line 83 in file "pwm.c"
   626 ;; Parameters:    Size  Location     Type
   627 ;;		None
   628 ;; Auto vars:     Size  Location     Type
   629 ;;		None
   630 ;; Return value:  Size  Location     Type
   631 ;;                  1    wreg      void 
   632 ;; Registers used:
   633 ;;		status,2, status,0, pclath, cstack
   634 ;; Tracked objects:
   635 ;;		On entry : 0/0
   636 ;;		On exit  : 0/0
   637 ;;		Unchanged: 0/0
   638 ;; Data sizes:     COMMON   BANK0   BANK1
   639 ;;      Params:         0       0       0
   640 ;;      Locals:         0       0       0
   641 ;;      Temps:          0       0       0
   642 ;;      Totals:         0       0       0
   643 ;;Total ram usage:        0 bytes
   644 ;; Hardware stack levels used: 1
   645 ;; Hardware stack levels required when called: 1
   646 ;; This function calls:
   647 ;;		_adc__init
   648 ;;		_pwm__init
   649 ;; This function is called by:
   650 ;;		_main
   651 ;; This function uses a non-reentrant model
   652 ;;
   653                           
   654     0754                     _main__init:	
   655                           ;psect for function _main__init
   656                           
   657     0754                     l721:	
   658                           ;incstack = 0
   659                           ; Regs used in _main__init: [status,2+status,0+pclath+cstack]
   660                           
   661                           
   662                           ;pwm.c: 84:  adc__init();
   663     0754  118A  2752  118A   	fcall	_adc__init
   664                           
   665                           ;pwm.c: 85:  pwm__init();
   666     0757  118A  2753  118A   	fcall	_pwm__init
   667     075A                     l31:
   668     075A  0008               	return
   669     075B                     __end_of_main__init:
   670                           
   671                           	psect	text5
   672     0753                     __ptext5:	
   673 ;; *************** function _pwm__init *****************
   674 ;; Defined at:
   675 ;;		line 100 in file "pwm.c"
   676 ;; Parameters:    Size  Location     Type
   677 ;;		None
   678 ;; Auto vars:     Size  Location     Type
   679 ;;		None
   680 ;; Return value:  Size  Location     Type
   681 ;;                  1    wreg      void 
   682 ;; Registers used:
   683 ;;		None
   684 ;; Tracked objects:
   685 ;;		On entry : 0/0
   686 ;;		On exit  : 0/0
   687 ;;		Unchanged: 0/0
   688 ;; Data sizes:     COMMON   BANK0   BANK1
   689 ;;      Params:         0       0       0
   690 ;;      Locals:         0       0       0
   691 ;;      Temps:          0       0       0
   692 ;;      Totals:         0       0       0
   693 ;;Total ram usage:        0 bytes
   694 ;; Hardware stack levels used: 1
   695 ;; This function calls:
   696 ;;		Nothing
   697 ;; This function is called by:
   698 ;;		_main__init
   699 ;; This function uses a non-reentrant model
   700 ;;
   701                           
   702     0753                     _pwm__init:	
   703                           ;psect for function _pwm__init
   704                           
   705     0753                     l43:	
   706                           ;incstack = 0
   707                           ; Regs used in _pwm__init: []
   708                           
   709     0753  0008               	return
   710     0754                     __end_of_pwm__init:
   711                           
   712                           	psect	text6
   713     0752                     __ptext6:	
   714 ;; *************** function _adc__init *****************
   715 ;; Defined at:
   716 ;;		line 89 in file "pwm.c"
   717 ;; Parameters:    Size  Location     Type
   718 ;;		None
   719 ;; Auto vars:     Size  Location     Type
   720 ;;		None
   721 ;; Return value:  Size  Location     Type
   722 ;;                  1    wreg      void 
   723 ;; Registers used:
   724 ;;		None
   725 ;; Tracked objects:
   726 ;;		On entry : 0/0
   727 ;;		On exit  : 0/0
   728 ;;		Unchanged: 0/0
   729 ;; Data sizes:     COMMON   BANK0   BANK1
   730 ;;      Params:         0       0       0
   731 ;;      Locals:         0       0       0
   732 ;;      Temps:          0       0       0
   733 ;;      Totals:         0       0       0
   734 ;;Total ram usage:        0 bytes
   735 ;; Hardware stack levels used: 1
   736 ;; This function calls:
   737 ;;		Nothing
   738 ;; This function is called by:
   739 ;;		_main__init
   740 ;; This function uses a non-reentrant model
   741 ;;
   742                           
   743     0752                     _adc__init:	
   744                           ;psect for function _adc__init
   745                           
   746     0752                     l34:	
   747                           ;incstack = 0
   748                           ; Regs used in _adc__init: []
   749                           
   750     0752  0008               	return
   751     0753                     __end_of_adc__init:
   752                           
   753                           	psect	text7
   754     076E                     __ptext7:	
   755 ;; *************** function _adc__read *****************
   756 ;; Defined at:
   757 ;;		line 92 in file "pwm.c"
   758 ;; Parameters:    Size  Location     Type
   759 ;;  channel         2    0[BANK0 ] unsigned int 
   760 ;; Auto vars:     Size  Location     Type
   761 ;;		None
   762 ;; Return value:  Size  Location     Type
   763 ;;                  2    0[BANK0 ] unsigned int 
   764 ;; Registers used:
   765 ;;		wreg, status,2, status,0
   766 ;; Tracked objects:
   767 ;;		On entry : 0/0
   768 ;;		On exit  : 0/0
   769 ;;		Unchanged: 0/0
   770 ;; Data sizes:     COMMON   BANK0   BANK1
   771 ;;      Params:         0       2       0
   772 ;;      Locals:         0       0       0
   773 ;;      Temps:          0       1       0
   774 ;;      Totals:         0       3       0
   775 ;;Total ram usage:        3 bytes
   776 ;; Hardware stack levels used: 1
   777 ;; This function calls:
   778 ;;		Nothing
   779 ;; This function is called by:
   780 ;;		_main
   781 ;; This function uses a non-reentrant model
   782 ;;
   783                           
   784     076E                     _adc__read:	
   785                           ;psect for function _adc__read
   786                           
   787     076E                     l723:	
   788                           ;incstack = 0
   789                           ; Regs used in _adc__read: [wreg+status,2+status,0]
   790                           
   791                           
   792                           ;pwm.c: 93:  ADCON0bits.CHS = channel;
   793     076E  1283               	bcf	3,5	;RP0=0, select bank0
   794     076F  1303               	bcf	3,6	;RP1=0, select bank0
   795     0770  0820               	movf	adc__read@channel,w
   796     0771  00A2               	movwf	??_adc__read
   797     0772  0DA2               	rlf	??_adc__read,f
   798     0773  0DA2               	rlf	??_adc__read,f
   799     0774  0DA2               	rlf	??_adc__read,f
   800     0775  081F               	movf	31,w	;volatile
   801     0776  0622               	xorwf	??_adc__read,w
   802     0777  39C7               	andlw	-57
   803     0778  0622               	xorwf	??_adc__read,w
   804     0779  009F               	movwf	31	;volatile
   805     077A                     l725:
   806                           
   807                           ;pwm.c: 94:  ADCON0bits.GO_DONE = 1;
   808     077A  151F               	bsf	31,2	;volatile
   809     077B                     l37:	
   810                           ;pwm.c: 96:  }
   811                           
   812                           
   813                           ;pwm.c: 95:  while(ADCON0bits.GO_DONE == 1) {
   814     077B  191F               	btfsc	31,2	;volatile
   815     077C  2F7E               	goto	u101
   816     077D  2F7F               	goto	u100
   817     077E                     u101:
   818     077E  2F7B               	goto	l37
   819     077F                     u100:
   820     077F                     l727:
   821                           
   822                           ;pwm.c: 97:  return (ADRESH << 8) | ADRESL;
   823     077F  081E               	movf	30,w	;volatile
   824     0780  00A1               	movwf	?_adc__read+1
   825     0781  1683               	bsf	3,5	;RP0=1, select bank1
   826     0782  1303               	bcf	3,6	;RP1=0, select bank1
   827     0783  081E               	movf	30,w	;volatile
   828     0784  1283               	bcf	3,5	;RP0=0, select bank0
   829     0785  1303               	bcf	3,6	;RP1=0, select bank0
   830     0786  00A0               	movwf	?_adc__read
   831     0787                     l40:
   832     0787  0008               	return
   833     0788                     __end_of_adc__read:
   834     007E                     btemp	set	126	;btemp
   835     007E                     wtemp0	set	126
   836                           
   837                           	psect	config
   838                           
   839                           ;Config register CONFIG @ 0x2007
   840                           ;	Oscillator Selection bits
   841                           ;	FOSC = HS, HS oscillator
   842                           ;	Watchdog Timer Enable bit
   843                           ;	WDTE = OFF, WDT disabled
   844                           ;	Power-up Timer Enable bit
   845                           ;	PWRTE = OFF, PWRT disabled
   846                           ;	Brown-out Reset Enable bit
   847                           ;	BOREN = OFF, BOR disabled
   848                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   849                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   850                           ;	Data EEPROM Memory Code Protection bit
   851                           ;	CPD = OFF, Data EEPROM code protection off
   852                           ;	Flash Program Memory Write Enable bits
   853                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   854                           ;	In-Circuit Debugger Mode bit
   855                           ;	DEBUG = 0x1, unprogrammed default
   856                           ;	Flash Program Memory Code Protection bit
   857                           ;	CP = OFF, Code protection off
   858     2007                     	org	8199
   859     2007  3F3A               	dw	16186

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            94     14      14
    BANK1            94      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_pwm__write
    _pwm__write->___wmul

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     487
                                             12 BANK0      2     2      0
                          _adc__read
                         _main__init
                         _pwm__setup
                         _pwm__write
 ---------------------------------------------------------------------------------
 (1) _pwm__write                                           6     4      2     365
                                              6 BANK0      6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     244
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _pwm__setup                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _main__init                                           0     0      0       0
                          _adc__init
                          _pwm__init
 ---------------------------------------------------------------------------------
 (2) _pwm__init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _adc__init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc__read                                            3     1      2      98
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adc__read
   _main__init
     _adc__init
     _pwm__init
   _pwm__setup
   _pwm__write
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            5E      0       0       3        0.0%
BANK0               5E      E       E       4       14.9%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            5E      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               5E      0       0       6        0.0%
ABS                  0      0       0       7        0.0%
DATA                 0      0       0       8        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Wed Mar 20 04:00:16 2024

                     l31 075A                       l40 0787                       l34 0752  
                     l43 0753                       l37 077B                       l46 076D  
                     l49 07D5                       u60 0790                       u61 078F  
                     u90 07AA                       u91 07A9                       u75 0797  
                     u85 079E      ___wmul@multiplicand 0022                      l143 0796  
                    l145 07AE                      l711 0790                      l721 0754  
                    l713 079D                      l723 076E                      l731 075B  
                    l715 07A4                      l707 0788                      l725 077A  
                    l741 076B                      l733 075F                      l717 07AA  
                    l709 078C                      l727 077F                      l743 076C  
                    l735 0762                      l751 07D9                      l737 0765  
                    l745 07AF                      l761 07E5                      l753 07DD  
                    l739 0769                      l747 07C9                      l763 07F3  
                    l755 07E1                      l757 07E2                      l749 07D6  
                    l759 07E5                      u100 077F                      u101 077E  
                    _PR2 0092                     _TMR2 0011                     _main 07D6  
                   btemp 007E                     start 0000                    ?_main 0020  
                  _T2CON 0012                    main@x 002C                    status 0003  
                  wtemp0 007E          __initialization 07FD             __end_of_main 07FD  
                 ??_main 0000                   _ADCON0 001F                   _ADCON1 009F  
                 _ADRESH 001E                   _ADRESL 009E                   _CCPR2L 001B  
                 ___wmul 0788  __end_of__initialization 07FD           __pcstackCOMMON 0000  
          pwm__write@pwm 002A               __pmaintext 07D6                  ?___wmul 0020  
                _CCP2CON 001D        __end_of_adc__init 0753        __end_of_adc__read 0788  
             _main__init 0754                  __ptext1 07AF                  __ptext2 0788  
                __ptext3 075B                  __ptext4 0754                  __ptext5 0753  
                __ptext6 0752                  __ptext7 076E                _T2CONbits 0012  
   end_of_initialization 07FD        __end_of_pwm__init 0754                _TRISCbits 0087  
             _pwm__setup 075B               _pwm__write 07AF              ?_main__init 0020  
       adc__read@channel 0020           __end_of___wmul 07AF      start_initialization 07FD  
         pwm__write@duty 0026                 ??___wmul 0000                ___latbits 0001  
          __pcstackBANK0 0020              ?_pwm__setup 0020                _adc__init 0752  
              _adc__read 076E              ?_pwm__write 0026               ?_adc__init 0020  
             ?_adc__read 0020           ___wmul@product 0024                _pwm__init 0753  
             _ADCON0bits 001F        ___wmul@multiplier 0020             ??_main__init 0000  
             ?_pwm__init 0020       __end_of_main__init 075B              ??_adc__init 0000  
            ??_adc__read 0022             ??_pwm__setup 0000             ??_pwm__write 0028  
     __end_of_pwm__setup 076E       __end_of_pwm__write 07D6              ??_pwm__init 0000  
