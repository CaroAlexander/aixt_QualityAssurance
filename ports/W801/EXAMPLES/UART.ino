// This Arduino code was automatically generated by Aixt Project
// Device = W801
// Board = W801
// Backend = arduino


#define time.sleep_ms(MS)    delay(MS)
#define output		OUTPUT
#define input		INPUT
#define in_pullup	INPUT_PULLUP
@[inline]
pub fn high(PIN_NAME) {
	C.digitalWrite(PIN_NAME, HIGH)
}
@[inline]
pub fn low(PIN_NAME) {
	C.digitalWrite(PIN_NAME, LOW)
}
@[inline]
pub fn read(PIN_NAME) {
	C.digitalRead(PIN_NAME)
}
@[inline]
pub fn setup(PIN_NAME, MODE) {
	C.pinMode(PIN_NAME, MODE)
}
@[inline]
pub fn write(PIN_NAME, VALUE) {
	C.digitalWrite(PIN_NAME, VALUE)
}
@[inline]
pub fn any_0() {
	C.Serial.available()
}
@[inline]
pub fn any_1() {
	C.Serial1.available()
}
@[inline]
pub fn any_x(UART_NUMBER) {
	C.uart.any_ ## UART_NUMBER ## .available()
}
#define SEL_UART_ANY(_0, _1, MACRO_NAME, ...) MACRO_NAME
@[inline]
pub fn any(...) SEL_UART_ANY(_0 __VA_OPT__(,) {
	C.__VA_ARGS__, uart.any_x, uart.any_0)(__VA_ARGS__)
}
@[inline]
pub fn available(MESSAGE) {
	C.Serial.available(MESSAGE)
}
@[inline]
pub fn print_0(MESSAGE) {
	C.Serial.print(MESSAGE)
}
@[inline]
pub fn print_1(MESSAGE) {
	C.Serial1.print(MESSAGE)
}
@[inline]
pub fn print_x(UART_NUMBER, MESSAGE) {
	C.uart.print_ ## UART_NUMBER (MESSAGE)
}
#define SEL_uart.print(_1, _2, MACRO_NAME, ...) MACRO_NAME
@[inline]
pub fn print(...) {
	C.SEL_uart.print(__VA_ARGS__, uart.print_x, uart.print_0)(__VA_ARGS__)
}
@[inline]
pub fn println_0(MESSAGE) {
	C.Serial.println(MESSAGE)
}
@[inline]
pub fn println_1(MESSAGE) {
	C.Serial1.println(MESSAGE)
}
@[inline]
pub fn println_2(MESSAGE) {
	C.Serial2.println(MESSAGE)
}
@[inline]
pub fn println_3(MESSAGE) {
	C.Serial3.println(MESSAGE)
}
@[inline]
pub fn println_4(MESSAGE) {
	C.Serial4.println(MESSAGE)
}
@[inline]
pub fn println_5(MESSAGE) {
	C.Serial5.println(MESSAGE)
}
@[inline]
pub fn println_x(UART_NUMBER, MESSAGE) {
	C.uart.println_ ## UART_NUMBER (MESSAGE)
}
#define SEL_uart.printLN(_1, _2, MACRO_NAME, ...) MACRO_NAME
@[inline]
pub fn println(...) {
	C.SEL_uart.printLN(__VA_ARGS__, uart.println_x, uart.println_0)(__VA_ARGS__)
}
@[inline]
pub fn read_0() {
	C.Serial.read()
}
@[inline]
pub fn read_1() {
	C.Serial1.read()
}
@[inline]
pub fn read_x(UART_NUMBER) {
	C.uart.read_ ## UART_NUMBER ## .read()
}
#define SEL_uart.read(_0, _1, MACRO_NAME, ...) MACRO_NAME
@[inline]
pub fn read(...) SEL_uart.read(_0 __VA_OPT__(,) {
	C.__VA_ARGS__, uart.read_x, uart.read_0)(__VA_ARGS__)
}
@[inline]
pub fn ready_0() {
	C.Serial.ready()
}
@[inline]
pub fn ready_1() {
	C.Serial1.ready()
}
@[inline]
pub fn ready_x(UART_NUMBER) {
	C.uart.ready_ ## UART_NUMBER ## .ready()
}
#define SEL_uart.readY(_0, _1, MACRO_NAME, ...) MACRO_NAME
@[inline]
pub fn read(...) SEL_uart.readY(_0 __VA_OPT__(,) {
	C.__VA_ARGS__, uart.ready_x, uart.ready_0)(__VA_ARGS__)
}
@[inline]
pub fn setup_0(BAUD_RATE) {
	C.Serial.begin(BAUD_RATE)
}
@[inline]
pub fn setup_1(BAUD_RATE) {
	C.Serial1.begin(BAUD_RATE)
}
@[inline]
pub fn setup_x(UART_NUMBER, BAUD_RATE) {
	C.uart.setup_ ## UART_NUMBER (BAUD_RATE)
}
#define SEL_uart.setup(_1, _2, MACRO_NAME, ...) MACRO_NAME
@[inline]
pub fn setup(...) {
	C.SEL_uart.setup(__VA_ARGS__, uart.setup_x, uart.setup_0)(__VA_ARGS__)
}

void main__init();

void time.init();

void pin.init();

void uart.init();


enum main____pin_names {
led1 = LED_BUILTIN_1,
led2 = LED_BUILTIN_2,
led3 = LED_BUILTIN_3,
led4 = LED_BUILTIN_4,
led5 = LED_BUILTIN_5,
led6 = LED_BUILTIN_6,
led7 = LED_BUILTIN_7,
a1 = PB21,
a2 = PB22,
a3 = PB23,
a4 = PB24,
a5 = PB0,
a6 = PB1,
pin1 = PB21,
pin2 = PB22,
};


void main__init() {
}


void time.init() {
}


void pin.init() {
}


void uart.init() {
}


void setup() {
main__init();
time.init();
pin.init();
uart.init();
uart.setup(0, 9600);
pin.setup(pin1, output);
pin.setup(pin2, output);
while(true) {uart.println(0, "\r\n Comunicacion UART tarjeta W801-PC:");uart.println(0, "\r\n Oprimiendo la letra Q, activa la salida  del pin1.");pin.high(pin2);time.sleep_ms(250);pin.low(pin2);time.sleep_ms(250);int32_t x = 0;x = uart.any();if((uart.available() > 0)) {char command = ' ';command = uart.read(0);if(command == 'Q') {pin.high(pin1);time.sleep_ms(2000);pin.low(pin1);time.sleep_ms(500);}else {pin.high(pin2);time.sleep_ms(500);pin.low(pin2);time.sleep_ms(500);};};}
}